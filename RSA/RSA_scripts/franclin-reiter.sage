#! /usr/bin/env sage 

from sage import *

def short_pad_attack(c1, c2, e, n):
	PRxy.<x,y> = PolynomialRing(Zmod(n))
	PRx.<xn> = PolynomialRing(Zmod(n))
	PRZZ.<xz,yz> = PolynomialRing(Zmod(n))
	g1 = x^e - c1
	g2 = (x+y)^e - c2
	q1 = g1.change_ring(PRZZ)
	q2 = g2.change_ring(PRZZ)
	h = q2.resultant(q1)
	h = h.univariate_polynomial()
	h = h.change_ring(PRx).subs(y=xn)
	h = h.monic()
	kbits = n.nbits()//(2*e*e)
	# найдет корни < 2^kbits с модулем >= n^0.5, то есть один из множителей больше корня из N
	diff = h.small_roots(X=2^kbits, beta=0.5)[0]
	return diff

def related_message_attack(c1, c2, diff, e, n):
	PRx.<x> = PolynomialRing(Zmod(n))
	g1 = x^e - c1
	g2 = (x+diff)^e - c2
	# так как Zmod() не поддерживает вычисления НОД, для многочленов над ним,
	# поэтому пришлось использовать костыль
	def gcd(g1, g2):
	    while g2:
	        g1, g2 = g2, g1 % g2
	    return g1.monic()
	return -gcd(g1, g2)[0]

def main():
	n_part = ["103812409689464886276475047044770609297885893720146571798654593885477457",
	          "188425375786047017735691464865799751262776976174291152757506033948402223", 
			  "696021505470811665108707476725788296289255777914656800454451779117367605",
			  "227364391483323666809650532860469176398816220707851639905500304208833022",
			  "438234033264200398959"]
	n = Integer("".join(n_part))
	e = 3
	C1_part = ["8092221064222631958487236173144661870974393935950682945292455137619306434285",
		  "6955177559840741728935352673342279200601183747306067608996720681613797436011",
		  "9183393329472392549436455409983100181575182377387788292136147120297917606662",
		  "3072581437727032587375791776803018577126003557969466157254564796296239210720584"]
	C2_part = ["6791081473364125483995559924307650956926833352923480483091862517043250884681",
		  "1724949938612094789634985050014315010004403584091823617453331158069585194651",
		  "7058735401730311136552430304386337211721179892398903858386674755399050921600",
		  "21680917724168686212470256813618660115179446665703345204632536460581956005530293"]
	C1 = Integer("".join(C1_part))
	C2 = Integer("".join(C2_part))
	nbits = n.nbits()
	kbits = nbits//(2*e*e)
	print ("длина паддинга %d байт " % (kbits/8))
	print ("Верхние %d бит (из %d общих бит) одинаковы" % (nbits-kbits, nbits))
	#рассчитаем разницу между M1 и M2
	diff = short_pad_attack(C1, C2, e, n)
	#дешифруем сообщение M1
	m = related_message_attack(C1, C2, diff, e, n)
	#перевод открытого текста M1 в читаемый вид
	M1_hex = hex(int(m))[2:-1]
	M1 = "".join([chr(int(M1_hex[2*i]+M1_hex[2*i+1], 16)) for i in range(len(M1_hex)//2)])
	#репевод открытого текста M2 в читаемый вид
	M2_hex = hex(int(m+diff))[2:-1]
	M2 = "".join([chr(int(M2_hex[2*i]+M2_hex[2*i+1], 16)) for i in range(len(M2_hex)//2)])
	print ("Сообщение M1: ", M1)
	print ("Сообщение M2: ", M2)

if __name__ == '__main__':
	main()

